<?php

// automatically generated by the FlatBuffers compiler, do not modify

namespace App\Flatbuffers;

use Google\FlatBuffers\ByteBuffer;
use Google\FlatBuffers\FlatBufferBuilder;
use Google\FlatBuffers\Struct;
use Google\FlatBuffers\Table;

class Learningdata extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Learningdata
     */
    public static function getRootAsLearningdata(ByteBuffer $bb)
    {
        $obj = new self();

        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Learningdata
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;

        return $this;
    }

    /**
     * @returnVectorOffset
     */
    public function getCategories($j)
    {
        $o = $this->__offset(4);
        $obj = new Category();

        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCategoriesLength()
    {
        $o = $this->__offset(4);

        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getCategoryGroups($j)
    {
        $o = $this->__offset(6);
        $obj = new CategoryGroup();

        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCategoryGroupsLength()
    {
        $o = $this->__offset(6);

        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getQuestions($j)
    {
        $o = $this->__offset(8);
        $obj = new Question();

        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getQuestionsLength()
    {
        $o = $this->__offset(8);

        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getSettings($j)
    {
        $o = $this->__offset(10);
        $obj = new Setting();

        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getSettingsLength()
    {
        $o = $this->__offset(10);

        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLearningdata(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Learningdata
     */
    public static function createLearningdata(FlatBufferBuilder $builder, $categories, $category_groups, $questions, $settings)
    {
        $builder->startObject(4);
        self::addCategories($builder, $categories);
        self::addCategoryGroups($builder, $category_groups);
        self::addQuestions($builder, $questions);
        self::addSettings($builder, $settings);
        $o = $builder->endObject();

        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCategories(FlatBufferBuilder $builder, $categories)
    {
        $builder->addOffsetX(0, $categories, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCategoriesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }

        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCategoriesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCategoryGroups(FlatBufferBuilder $builder, $categoryGroups)
    {
        $builder->addOffsetX(1, $categoryGroups, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCategoryGroupsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }

        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCategoryGroupsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addQuestions(FlatBufferBuilder $builder, $questions)
    {
        $builder->addOffsetX(2, $questions, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createQuestionsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }

        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startQuestionsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSettings(FlatBufferBuilder $builder, $settings)
    {
        $builder->addOffsetX(3, $settings, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSettingsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }

        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSettingsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLearningdata(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();

        return $o;
    }

    public static function finishLearningdataBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset);
    }
}
