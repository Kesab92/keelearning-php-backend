<?php

// automatically generated by the FlatBuffers compiler, do not modify

namespace App\Flatbuffers;

use Google\FlatBuffers\ByteBuffer;
use Google\FlatBuffers\FlatBufferBuilder;
use Google\FlatBuffers\Struct;
use Google\FlatBuffers\Table;

class Question extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Question
     */
    public static function getRootAsQuestion(ByteBuffer $bb)
    {
        $obj = new self();

        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Question
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;

        return $this;
    }

    /**
     * @return short
     */
    public function getBox()
    {
        $o = $this->__offset(4);

        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    public function getBoxEnteredAt()
    {
        $o = $this->__offset(6);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return int
     */
    public function getCategoryId()
    {
        $o = $this->__offset(8);

        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return float
     */
    public function getDifficulty()
    {
        $o = $this->__offset(10);

        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return int
     */
    public function getId()
    {
        $o = $this->__offset(12);

        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    public function getLatex()
    {
        $o = $this->__offset(14);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getTitle()
    {
        $o = $this->__offset(16);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getType()
    {
        $o = $this->__offset(18);

        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getAnswers($j)
    {
        $o = $this->__offset(20);
        $obj = new Answer();

        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getAnswersLength()
    {
        $o = $this->__offset(20);

        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getAttachments($j)
    {
        $o = $this->__offset(22);
        $obj = new Attachment();

        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getAttachmentsLength()
    {
        $o = $this->__offset(22);

        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startQuestion(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Question
     */
    public static function createQuestion(FlatBufferBuilder $builder, $box, $box_entered_at, $category_id, $difficulty, $id, $latex, $title, $type, $answers, $attachments)
    {
        $builder->startObject(10);
        self::addBox($builder, $box);
        self::addBoxEnteredAt($builder, $box_entered_at);
        self::addCategoryId($builder, $category_id);
        self::addDifficulty($builder, $difficulty);
        self::addId($builder, $id);
        self::addLatex($builder, $latex);
        self::addTitle($builder, $title);
        self::addType($builder, $type);
        self::addAnswers($builder, $answers);
        self::addAttachments($builder, $attachments);
        $o = $builder->endObject();

        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addBox(FlatBufferBuilder $builder, $box)
    {
        $builder->addShortX(0, $box, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBoxEnteredAt(FlatBufferBuilder $builder, $boxEnteredAt)
    {
        $builder->addOffsetX(1, $boxEnteredAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addCategoryId(FlatBufferBuilder $builder, $categoryId)
    {
        $builder->addIntX(2, $categoryId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDifficulty(FlatBufferBuilder $builder, $difficulty)
    {
        $builder->addFloatX(3, $difficulty, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addIntX(4, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLatex(FlatBufferBuilder $builder, $latex)
    {
        $builder->addOffsetX(5, $latex, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTitle(FlatBufferBuilder $builder, $title)
    {
        $builder->addOffsetX(6, $title, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addShortX(7, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAnswers(FlatBufferBuilder $builder, $answers)
    {
        $builder->addOffsetX(8, $answers, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAnswersVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }

        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAnswersVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAttachments(FlatBufferBuilder $builder, $attachments)
    {
        $builder->addOffsetX(9, $attachments, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAttachmentsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }

        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAttachmentsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endQuestion(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();

        return $o;
    }
}
