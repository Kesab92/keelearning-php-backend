<?php

// automatically generated by the FlatBuffers compiler, do not modify

namespace App\Flatbuffers;

use Google\FlatBuffers\ByteBuffer;
use Google\FlatBuffers\FlatBufferBuilder;
use Google\FlatBuffers\Struct;
use Google\FlatBuffers\Table;

class Answer extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Answer
     */
    public static function getRootAsAnswer(ByteBuffer $bb)
    {
        $obj = new self();

        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Answer
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;

        return $this;
    }

    public function getContent()
    {
        $o = $this->__offset(4);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return bool
     */
    public function getCorrect()
    {
        $o = $this->__offset(6);

        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    public function getFeedback()
    {
        $o = $this->__offset(8);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return int
     */
    public function getId()
    {
        $o = $this->__offset(10);

        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    public function getLanguage()
    {
        $o = $this->__offset(12);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return int
     */
    public function getQuestionId()
    {
        $o = $this->__offset(14);

        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAnswer(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Answer
     */
    public static function createAnswer(FlatBufferBuilder $builder, $content, $correct, $feedback, $id, $language, $question_id)
    {
        $builder->startObject(6);
        self::addContent($builder, $content);
        self::addCorrect($builder, $correct);
        self::addFeedback($builder, $feedback);
        self::addId($builder, $id);
        self::addLanguage($builder, $language);
        self::addQuestionId($builder, $question_id);
        $o = $builder->endObject();

        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addContent(FlatBufferBuilder $builder, $content)
    {
        $builder->addOffsetX(0, $content, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addCorrect(FlatBufferBuilder $builder, $correct)
    {
        $builder->addBoolX(1, $correct, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFeedback(FlatBufferBuilder $builder, $feedback)
    {
        $builder->addOffsetX(2, $feedback, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addIntX(3, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLanguage(FlatBufferBuilder $builder, $language)
    {
        $builder->addOffsetX(4, $language, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQuestionId(FlatBufferBuilder $builder, $questionId)
    {
        $builder->addIntX(5, $questionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAnswer(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();

        return $o;
    }
}
