<?php

// automatically generated by the FlatBuffers compiler, do not modify

namespace App\Flatbuffers;

use Google\FlatBuffers\ByteBuffer;
use Google\FlatBuffers\FlatBufferBuilder;
use Google\FlatBuffers\Struct;
use Google\FlatBuffers\Table;

class Attachment extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Attachment
     */
    public static function getRootAsAttachment(ByteBuffer $bb)
    {
        $obj = new self();

        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Attachment
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;

        return $this;
    }

    /**
     * @return int
     */
    public function getId()
    {
        $o = $this->__offset(4);

        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getQuestionId()
    {
        $o = $this->__offset(6);

        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getType()
    {
        $o = $this->__offset(8);

        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    public function getUrl()
    {
        $o = $this->__offset(10);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getAttachmentUrl()
    {
        $o = $this->__offset(12);

        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAttachment(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Attachment
     */
    public static function createAttachment(FlatBufferBuilder $builder, $id, $question_id, $type, $url, $attachment_url)
    {
        $builder->startObject(5);
        self::addId($builder, $id);
        self::addQuestionId($builder, $question_id);
        self::addType($builder, $type);
        self::addUrl($builder, $url);
        self::addAttachmentUrl($builder, $attachment_url);
        $o = $builder->endObject();

        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addIntX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addQuestionId(FlatBufferBuilder $builder, $questionId)
    {
        $builder->addIntX(1, $questionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addShortX(2, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUrl(FlatBufferBuilder $builder, $url)
    {
        $builder->addOffsetX(3, $url, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAttachmentUrl(FlatBufferBuilder $builder, $attachmentUrl)
    {
        $builder->addOffsetX(4, $attachmentUrl, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAttachment(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();

        return $o;
    }
}
