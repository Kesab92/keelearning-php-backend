<?php

namespace App\Http\Controllers\XApi;

use App\Http\Controllers\Controller;
use App\Models\User;
use Str;
use Tymon\JWTAuth\Http\Parser\AuthHeaders;
use Tymon\JWTAuth\Http\Parser\Parser;

class XapiController extends Controller
{
    protected ?User $user = null;
    protected ?string $wbtId = null;

    public function proxyForceId(string $wbtIdEncoded, string $path)
    {
        // The utf8_encode is necessary, because this string is generated by JavaScript's btoa function
        $this->wbtId = utf8_encode(base64_decode($wbtIdEncoded));
        if (!$this->wbtId) {
            return response()->json([
                'errorId' => 'NONE',
                'message' => 'Unauthorised',
            ])->setStatusCode(401);
        }
        return $this->proxy($path);
    }

    /**
     * Proxy requests to xapi, we're providing the WBT with the quizapp auth token
     * instead of the xapi auth token and proxying the requests.
     *
     * @param string $path
     * @param string $wbtId
     */
    public function proxy(string $path)
    {
        try {
            $this->setupAuth();
            $this->user = auth('api')->user();
        } catch (\Exception $e) {}

        if (! $this->user || ! $this->user->app->xapi_token) {
            // not a valid keelearning user or no xapi token set, we're replicating the xAPI unauthorized response
            return response()->json([
                'errorId' => 'NONE',
                'message' => 'Unauthorised',
            ])->setStatusCode(401);
        }

        $postParameters = request()->post();
        if (!isset($postParameters[0])) {
            $postParameters = $this->modifyPostParameters($postParameters);
        } else {
            // some WBTs send an array of payload objects
            foreach ($postParameters as &$postParametersEntry) {
                $postParametersEntry = $this->modifyPostParameters($postParametersEntry);
            }
        }

        $getParameters = request()->query();
        if (isset($getParameters['actor'])) {
            $newActorObject = $this->buildActorObject($this->user);
            if ($this->isJsonEncoded($getParameters['actor'])) {
                $getParameters['actor'] = json_encode($newActorObject);
            } else {
                $getParameters['actor'] = $newActorObject;
            }
        }
        if (isset($getParameters['agent'])) {
            $newAgentObject = $this->buildActorObject($this->user);
            if ($this->isJsonEncoded($getParameters['agent'])) {
                $getParameters['agent'] = json_encode($newAgentObject);
            } else {
                $getParameters['agent'] = $newAgentObject;
            }
        }

        // override WBT ID
        if ($this->wbtId && isset($getParameters['activityId'])) {
            $getParameters['activityId'] = $this->replaceWbtId($getParameters['activityId'], $this->wbtId);
        }

        $url = env('XAPI_URL').'/'.$path;

        $headers = [
            'Authorization: '.$this->user->app->xapi_token,
            'X-Experience-API-Version: '.request()->header('X-Experience-API-Version', '1.0.3'),
            'Content-Type: '.request()->header('Content-Type', 'application/json'),
        ];

        $curlHandle = curl_init();

        if (env('APP_ENV') === 'local') {
            curl_setopt($curlHandle, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($curlHandle, CURLOPT_SSL_VERIFYSTATUS, false);
            curl_setopt($curlHandle, CURLOPT_SSL_VERIFYHOST, 0);
        }

        curl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 5);
        curl_setopt($curlHandle, CURLOPT_TIMEOUT, 10);
        curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curlHandle, CURLOPT_URL, $url.'?'.http_build_query($getParameters));

        curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, request()->getMethod());
        if (count($postParameters)) {
            curl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode($postParameters));
        } elseif (request()->header('Content-Type') == 'application/octet-stream') {
            curl_setopt($curlHandle, CURLOPT_POSTFIELDS, request()->getContent());
        }

        curl_setopt($curlHandle, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($curlHandle);
        if (curl_errno($curlHandle)) {
            $error = curl_error($curlHandle);
            curl_close($curlHandle);

            return response()->json([
                'errorId' => 'NONE',
                'message' => $error,
            ])->setStatusCode(502);
        }
        $responseCode = curl_getinfo($curlHandle, CURLINFO_RESPONSE_CODE);
        curl_close($curlHandle);

        if ($result) {
            try {
                return response()->make($result, $responseCode);
            } catch (\Exception $e) {
            }
        }

        return response()->json($result, $responseCode);
    }

    private function setupAuth()
    {
        app()->extend('tymon.jwt.parser', function (Parser $parser) {
            $chain = $parser->getChain();
            foreach ($chain as $entry) {
                if ($entry instanceof AuthHeaders) {
                    $entry->setHeaderName('Authorization');
                }
            }

            return $parser;
        });
    }

    private function isJsonEncoded($input)
    {
        if (! $input || ! is_string($input)) {
            return false;
        }
        if (substr(utrim($input), 0, 1) === '{') {
            return true;
        }

        return false;
    }

    /**
     * Build the xAPI actor/agent object based on the given user.
     *
     * @param User $user
     * @return array
     */
    private function buildActorObject(User $user): array
    {
        return [
            'objectType' => 'Agent',
            'name' => $user->getFullName(),
            'account' => [
                'homePage' => env('APP_URL'),
                // this field is called 'name', but xAPI defines it as 'The unique id or name used to log in to this account.'
                // only the user's ID is unique in our system
                'name' => (string) $user->id,
            ],
        ];
    }

    /**
     * @param array|int|string $postParameters
     * @return array|int|string
     */
    private function modifyPostParameters($postParameters)
    {
        // Some wbts just send a single value as the post value, so we can't replace anything in that case, because
        // we don't know what it is.
        if(is_int($postParameters) || is_string($postParameters)) {
            return $postParameters;
        }
        if (isset($postParameters['actor'])) {
            $postParameters['actor'] = $this->buildActorObject($this->user);
        }
        if (isset($postParameters['agent'])) {
            $postParameters['agent'] = json_encode($this->buildActorObject($this->user));
        }
        if ($this->wbtId && isset($postParameters['object']) && isset($postParameters['object']['id'])) {
            if (isset($postParameters['object']['objectType']) && $postParameters['object']['objectType'] == 'Activity') {
                $postParameters['object']['id'] = $this->replaceWbtId($postParameters['object']['id'], $this->wbtId);
            }
        }
        return $postParameters;
    }

    /**
     * Replaces the wbt ID of a given activity id.
     * The activity ID is an URL with an optional path referring
     * to the currently active content.
     *
     * @param string $activityId
     * @return string
     */
    private function replaceWbtId(string $activityId): string
    {
        // check if we already get our custom wbt ID
        if (Str::startsWith($activityId, $this->wbtId)) {
            return $activityId;
        }
        $parsedActivityId = parse_url($activityId);
        $activityPath = '';
        // do we have a full URL?
        if (isset($parsedActivityId['scheme'])) {
            $activityPath = $parsedActivityId['path'] ?? '';
        } elseif (Str::contains($activityId, '/')) {
            $activityPath = '/' . Str::after($activityId, '/');
        }
        return $this->wbtId . $activityPath;
    }
}
